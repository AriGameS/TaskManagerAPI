name: Hotfix Pipeline

on:
  push:
    branches: [ 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  hotfix-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run critical tests
      run: |
        python -m pytest tests/test_app.py -v --cov=app --cov-report=term-missing

    - name: Run security scan
      run: |
        pip install bandit
        bandit -r app.py -f json -o bandit-report.json || true

    - name: Build Docker image
      run: |
        docker build -t task-manager-api:hotfix .

    - name: Test Docker image
      run: |
        docker run -d -p 5125:5125 --name hotfix-test task-manager-api:hotfix
        sleep 5
        curl -f http://localhost:5125/api || exit 1
        docker stop hotfix-test
        docker rm hotfix-test

    - name: Hotfix validation
      run: |
        echo "üö® Hotfix pipeline completed"
        echo "Branch: ${{ github.ref_name }}"
        echo "‚ö†Ô∏è Hotfix ready for emergency deployment"

  emergency-deploy:
    runs-on: ubuntu-latest
    needs: hotfix-tests
    if: github.ref_name == 'hotfix/emergency'

    steps:
    - name: Emergency deployment
      run: |
        echo "üö® EMERGENCY DEPLOYMENT TRIGGERED"
        echo "This would deploy the hotfix immediately to production"
        echo "Branch: ${{ github.ref_name }}"
